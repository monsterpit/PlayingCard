{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Italic;\f4\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red128\green0\blue128;
\red92\green38\blue153;\red50\green109\blue116;\red64\green128\blue2;\red57\green0\blue160;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c50196\c0\c50196;
\csgenericrgb\c35922\c14825\c60191;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c25098\c50194\c896;\csgenericrgb\c22454\c0\c62803;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\qc\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul Gestures\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}We have seen how to draw in a UIView , how do we get touches?\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}We can get notified of the raw touch events (touch down , moved , up ,etc)\
{\listtext	\uc0\u8259 	}Or we can react to certain, predefined "gestures". \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}Gestures are recognized by instance of UIGestureRecognizer\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}The base class is "abstract". We only actually use subclasses to recognize.\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}There are two sides to using a gesture recognizer\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}Adding a gesture recognizer to a UIView (asking the UIView to "recognize" that gesture)\
{\listtext	\uc0\u8259 	}Providing a method to "handle" that gesture (not necessarily handled by the UIView)\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}Usually the first is done by a controller\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}Though occassionaly a UIView will do this itself if the gesture is integral to its existence\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}The second is provided either by the UIView or a controller\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}Depending on the situation .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
How do we get mutlitouch and gestures stuff people can make with fingers on the screen?\
You could get all the touch events yourself and look at every finger when it moves but that would be incredibly tedious , so we dont do that, So we dont do that.\
Instead we let iOS look at all those little movements  and turn them into gestures, like swipe,pinch,pan,tap.So that the lvel at which we program this stuff.\
Gestures are all represented in iOS with class called 
\b "UIGestureRecognizer"\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 It's
\b0  a thing that recognizes a gesture from all those finger movements. That class is abstract.\
It itself doesn't know how to recognize any gestures.But there's a lot of subclasses of it that know how to recognize various gestures.\
So when you are recognizing  a gesture there's actually two parts to it. \

\b 	1) is you have to tell  a view,please start recognizing pinches , please start recognizing taps.\
	2 ) Then you have to provide a handler so that when it does recognize it, it calls some function.\
\
i.e. first thing asking a view to recognize a gesture is surprisingly often done by the controller or in your storyboard.That's usually how you add gestures, usually .\
Sometimes a view will add a gesture recognizer to itself if it's just totally inherent what it does. like scrollView will add pinching and panning gestures to itself because it's not even a scrollview without those gestures.\
But a lot of times, it's the control  that does it.\
The second thing the handling of the gesture, if it something that affects the model then the controller is going to handle it.\
If it's something that only affects the way things is viewed then the view will often handle it directly.\

\b0 \
\
\
\
\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8226 	}Adding a gesture recognizer to a UIView\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}Imagine we wanted a UIView in our Controller's view to recognize a "pan" gesture\
{\listtext	\uc0\u8259 	}We can configure it to do so in the property observer for the outlet to that UIView ...\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3     
\f2\b \cf4 @IBOutlet
\f1\b0 \cf2  
\f2\b \cf4 weak
\f1\b0 \cf2  
\f2\b \cf4 var
\f1\b0 \cf2  pannableView : \cf5 UIView\cf2 \{
\f0 \cf0 \

\f1 \cf2         
\f2\b \cf4 didSet
\f1\b0 \cf2 \{
\f0 \cf0 \

\f1 \cf2             
\f2\b \cf4 let
\f1\b0 \cf2  panGestureRecognizer = \cf5 UIPanGestureRecognizer\cf2 (target: 
\f2\b \cf4 self
\f1\b0 \cf2 , action: 
\f2\b \cf4 #selector
\f1\b0 \cf2 (\cf6 ViewController\cf2 .pan(recognizer:)))
\f0 \cf0 \

\f1 \cf2         \}
\f0 \cf0 \

\f1 \cf2         pannableView.addGestureRecognizer(panGestureRecognizer)
\f0 \cf0 \

\f1 \cf2     \}
\f0 \cf0 \cb1 \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}The property observer's 
\f2\b \cf4 \cb3 didSet 
\f0\b0 \cf0 \cb1 code gets called when iOS hooks up this outlet at runtime.\
{\listtext	\uc0\u8259 	}Here we are creating an instance of a concrete subclass of  
\f1 \cf5 \cb3 UIPanGestureRecognizer
\f0 \cf0 \cb1  (for pans)\
{\listtext	\uc0\u8259 	}The 
\f1 \cf2 \cb3 target 
\f0 \cf0 \cb1 gets notified when the gesture is recognized(here it's the Controller itself)\
{\listtext	\uc0\u8259 	}The 
\f1 \cf2 \cb3 action 
\f0 \cf0 \cb1 is the method invoked on recognition (that method's argument? the recognizer)\
{\listtext	\uc0\u8259 	}Here we ask the UIView to actually start trying to recognize this gesture in its bounds.\
{\listtext	\uc0\u8259 	}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \

\b How do you add a gesture to a view??\
How do you tell that view start recognizing this?\
Well usually we do this in the didSet of an outlet setter.\
So here We got an outlet to some view that I want to recognize pans.
\b0 Okay some view might want it to recognize pan gesture\
So in the didSet of the outlet remember this didSet is called when iOS wires up that outlet to the view that you want to pan.\
Then we are going to create a concrete instance of UIGestureRecognizer called a 
\f1 \cf5 \cb3 UIPanGestureRecognizer 
\f0 \cf0 \cb1 .Now all of the recognizers have same initializer . It has two arguments , the target that the object that is going to handle this, it's usually either the controller or the view itself and that's just the name of the  method with    
\f2\b \cf4 \cb3 #selector 
\f0\b0 \cf0 \cb1 around it . That is going to be called when this gesture starts to recognize a pan happening.\
So then once we have created a UIPanGestureRecognizer we ask the view please start recognizing this. and we do that by calling 
\f1 \cf2 \cb3 addGestureRecognizer(panGestureRecognizer) 
\f0 \cf0 \cb1 \
And a view can have as many gestures recognizer as you want.It could be recognizing 20 different gestures at the same time. It's perfectly fine
\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf0 \ul \ulc0 Handler\
\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 \ulnone {\listtext	\uc0\u8226 	} A handler for a gesture needs gesture-specific information\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}So each concrete subclass provides special methods for handling that type of gesture\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\uc0\u8226 	}For example , UIPanGestureRecognizer provides 3 methods\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3     
\f2\b \cf4 func
\f1\b0 \cf2  translation(in:\cf5 UIView\cf2 ?) -> \cf5 CGpoint\cf2  
\f3\i \cf7 \cb3 //cumulative since start of recognition
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 func
\f1\b0 \cf2  velocity(in:\cf5 UIView\cf2 ?) -> \cf5 CGPoint\cf2  
\f3\i \cf7 \cb3 //how fast the finger is moving(point/s)
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 func
\f1\b0 \cf2  setTranslation(CGPoint,in : \cf5 UIView\cf2 ?)\
\
\pard\tx940\tx1440\pardeftab593\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\f0 \cf0 \cb1 {\listtext	\uc0\u8259 	}This last one is interesting because it allows you to reset the transalation so far \
{\listtext	\uc0\u8259 	}By resetting the translation to zero all the time , you end up getting "incremental" translation\
\pard\tx560\tx1120\pardeftab593\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1120\pardeftab593\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\uc0\u8226 	}The abstract superclass also provides state information \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f2\b \cf4 \cb3 var
\f1\b0 \cf2  state : \cf5 UIPanGestureRecognizer\cf2 \{
\f2\b \cf4 get
\f1\b0 \cf2 \}\
\pard\tx940\tx1440\pardeftab593\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1
\f0 \cf0 \cb1 {\listtext	\uc0\u8259 	}This sits around in 
\f1 \cf5 \cb3 .possible 
\f0 \cf0 \cb1 until recognition starts\
{\listtext	\uc0\u8259 	}For a continuous gesture (e..g pan), it moves from 
\f1 \cf5 \cb3 .began 
\f0 \cf0 \cb1 through repeated 
\f1 \cf5 \cb3 .changed 
\f0 \cf0 \cb1 to 
\f1 \cf5 \cb3 .ended\
\ls10\ilvl1
\f0 \cf0 \cb1 {\listtext	\uc0\u8259 	}For a discrete (e.g. swipe) gesture it goes straight to 
\f1 \cf5 \cb3 .ended 
\f0 \cf0 \cb1 or 
\f1 \cf5 \cb3 .recognized\
\ls10\ilvl1
\f0 \cf0 \cb1 {\listtext	\uc0\u8259 	}It can go to 
\f1 \cf5 \cb3 .failed 
\f0 \cf0 \cb1 or 
\f1 \cf5 \cb3 .cancelled 
\f0 \cf0 \cb1 too, so watch out for those!\ul \
\pard\tx560\tx1120\pardeftab593\pardirnatural\partightenfactor0
\cf0 \ulc0 \
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf0 \ulc0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ulnone So when a pan starts to happen , a handler's gonna get called and the handler's gonna be that pan method that we saw over there.\
And inside that method we are going to have to be able to get information about the pan\
Well, each kind of gesture has it's own information.\
Like a pinch gesture has a scale you're pinching to,\
A pan gesture is where is the pan happening.\
So if you look at 
\f1 \cf5 \cb3 UIPanGestureRecognizer
\f0 \cf0 \cb1  in the docs\
You will see it has methods like \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 translation  // where the pan is in that view
\f0 \cf0 \cb1 \

\f1 \cf2 \cb3 velocity		// Or velocity how fast is the pan happening right now\
setTranslation // will let you reset that translation in view, so you get incremental panning,Instead of continuous length how far you have panned since the start of the pan, you get how much you got since the last time the pan moved, which sometimes can be useful\

\f0 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 Now the abstract super class UIGestureRecognizer it also has a very important var called "
\f2\b \cf4 \cb3 state
\f0\b0 \cf0 \cb1 ".\
So this whole gesture recognizer thing is a state machine and this 
\f2\b \cf4 \cb3 state
\f0\b0 \cf0 \cb1  var represents that.\
So soon as  a gesture becomes possible, like a pan . Probably a finger touches down.\
And then as soon has it moves , it moves into the "began state"\
So this pan has began and then as the finger moves it stays in the changed state. \
But it really keeps moving to the changed state from the changed state over and over.\
Now everytime one of these state changes happens that handler gets called .\
Whoever's handling this thing gets a chance to do it. So for a pan gesture you get\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf5 \cb3 .changed
\f0 \cf0 \cb1  called everytime the thing moves.\
And then eventually the finger goes up and it ended and you get \

\f1 \cf5 \cb3 .ended.\

\f0 \cf0 \cb1 So your handler's just called everytime the state machine changes.\
Now some things,like a swipe are discrete either the swipe happened or it didnt.\
You don't get 
\f1 \cf5 \cb3 .changed 
\f0 \cf0 \cb1 as your finger's flying across the screen, it's a discrete gesture.\
You just 
\f1 \cf5 \cb3 .ended 
\f0 \cf0 \cb1 for a swipe 
\f1 \cf5 \cb3 .recognized 
\f0 \cf0 \cb1 gets sent to your handler once and that's it.\
But for continuous gestures you get the 
\f1 \cf5 \cb3 .changed.\

\f0 \cf0 \cb1 Now there's also 2 other interesting states , 
\f1 \cf5 \cb3 .failed 
\f0 \cf0 \cb1 and 
\f1 \cf5 \cb3 .cancelled.\

\f0 \cf0 \cb1 So .
\f1 \cf5 \cb3 failed 
\f0 \cf0 \cb1 can happen when you have multiple gestures and one of them wins.\
Like let's say you have tap gesture and a pan gesture.\
As soon as you go mouse down, it could be either of them . But as soon as it doesn't it come right back up as soon as you touch down So as soon as you come back up  oh it can't be a pan gesture anymore so that one's called because it didnt failed.\
\
So it can go into failed states, but that's only if it actually starts up . It wouldnt be recognized in the first place if it didnt get that far and \
\
then cancelled is another interesting and this happens lot with drag and drop which is you started something and it started up  and its going good . But hen a drag and drop  happens and now its cancelled . Whatever gesture you were recognizing . So you do wanna look for failed and cancelled make sure you clean up  whatever.take away something on the screen or whatever off the screen or whatever because your  gesture has  failed  or has been cancelled by something else.\
\
\
\
\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\uc0\u8226 	}So given this information what would our pan handler  look like?\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3     
\f2\b \cf4 func
\f1\b0 \cf2  pan(recognizer : \cf5 UIPanGestureRecognizer\cf2 )\{
\f0 \cf0 \

\f1 \cf2         
\f2\b \cf4 switch
\f1\b0 \cf2  recognizer.\cf5 state\cf2 \{
\f0 \cf0 \

\f1 \cf2         
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 \cb3 changed\cf2 \cb3  : 
\f2\b \cf4 fallthrough
\f0\b0 \cf0 \

\f1 \cf2         
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 \cb3 ended\cf2 \cb3  :
\f0 \cf0 \

\f1 \cf2             
\f2\b \cf4 let
\f1\b0 \cf2  translation = recognizer.translation(in: pannableView)
\f0 \cf0 \

\f1 \cf2             
\f3\i \cf7 \cb3 //update anything that depends on the pan gesture using translation.x and translation.y
\f0\i0 \cf0 \cb3 \

\f1 \cf2             recognizer.setTranslation(\cf5 CGPoint\cf2 .zero, in: pannableView)
\f0 \cf0 \

\f1 \cf2         
\f2\b \cf4 default
\f1\b0 \cf2 : 
\f2\b \cf4 break
\f0\b0 \cf0 \

\f1 \cf2         \}
\f0 \cf0 \

\f1 \cf2     \}\
\
\pard\tx940\tx1440\pardeftab593\li1440\fi-1440\pardirnatural\partightenfactor0
\ls12\ilvl1\cf2 {\listtext	
\f4 \uc0\u8259 
\f1 	}Remember that the action was pan(recognizer : \cf5 UIPanGestureRecognizer\cf2 ) \
\pard\tx940\tx1440\pardeftab593\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf2 {\listtext	
\f4 \uc0\u8259 
\f1 	}We are only going to do anything when the finger moves or lift up off the device surface\
\pard\tx940\tx1440\pardeftab593\li1440\fi-1440\pardirnatural\partightenfactor0
\ls14\ilvl1
\f2\b \cf4 {\listtext	
\f4\b0 \uc0\u8259 
\f2\b 	}fallthrough
\f1\b0 \cf2  is "execute the code for the next case down"(case .changed , .ended )\
\ls14\ilvl1
\f0 \cf0 \cb1 {\listtext	\uc0\u8259 	}Here we get the location of the pan in the pannableView's coordinate system\
{\listtext	\uc0\u8259 	}Now we do whatever we want with that information\
{\listtext	\uc0\u8259 	}By resetting the translation the next one we get will be incremental movement \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf0 \
\
\
So its just pan with argument being the pan gesture recognizer itself handed back to us. and we switch on the state we always switch on the state\
 and if it's changed or ended\
 and notice we are using fallthrough there  but we could have just said  
\f1 \cf2 \cb3 .\cf8 \cb3 changed,\cf2 \cb3 .\cf8 \cb3 ended\cf2 \cb3  \cf8 \cb3  \
So if its 
\f0 \cf0 \cb1 .changed,.ended our pan is still moving or we have just finished it.Then we gonna find out where the pan was by calling \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 recognizer.translation(in: pannableView)\
Then we gonna do something based on where the pan went  and may be if we are looking for incremental pan . we will reset it back to zero .\
So the next one will be from zero and be incremental.\
\
\
\
\
\
\
\
\
\
\
Concrete Gestures besides PanGestures? \
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf2 {\listtext	\uc0\u8226 	}    UIPinchGestureRecognizer
\f0 \cf0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  scale : \cf5 CGFloat\cf2            
\f3\i \cf7 \cb3 // not read-only (can reset)
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  velocity : \cf5 CGFloat\cf2  \{
\f2\b \cf4 get
\f1\b0 \cf2 \}  
\f3\i \cf7 \cb3 // scale factor per second
\f1\i0 \cf2 \cb3 \
\
\
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf2 {\listtext	\uc0\u8226 	}    UIRotationGestureRecognizer
\f0 \cf0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  rotation : \cf5 CGFloat\cf2            
\f3\i \cf7 \cb3 // not read-only (can reset);in radians
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  velocity : \cf5 CGFloat\cf2  \{
\f2\b \cf4 get
\f1\b0 \cf2 \}  
\f3\i \cf7 \cb3 // radians per second\
\
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0
\f1\i0 \cf2 \cb3 {\listtext	\uc0\u8226 	}    UISwipeGestureRecognizer
\f0 \cf0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2     Set up the direction and number of fingers you want
\f0 \cf0 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  direction : \cf5 UISwipeGestureRecognizerDirection\cf2  
\f3\i \cf7 \cb3 //swipe direction you want
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  numberOfTouchesRequired : \cf5 Int\cf2                  
\f3\i \cf7 \cb3 // finger count\
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0
\f1\i0 \cf2 \cb3 {\listtext	\uc0\u8226 	}    UITapGestureRecognizer
\f0 \cf0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2     This 
\f2\b \cf4 is
\f1\b0 \cf2  discrete but you should check .ended to actually 
\f2\b \cf4 do
\f1\b0 \cf2  something
\f0 \cf0 \

\f1 \cf2     Set up the number of taps and fingers you want
\f0 \cf0 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  numberOfTapsRequired : \cf5 Int\cf2     
\f3\i \cf7 \cb3 //single tap,double tap,etc.
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  numberOfTouchesRequired : \cf5 Int\cf2  
\f3\i \cf7 \cb3 // finger count
\f1\i0 \cf2 \cb3 \
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0\cf2 {\listtext	\uc0\u8226 	}    UILongPressGestureRecognizer
\f0 \cf0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2     This 
\f2\b \cf4 is
\f1\b0 \cf2  continuous (not discrete) gesture (i.e. you will get .changed 
\f2\b \cf4 if
\f1\b0 \cf2  the finger moves)
\f0 \cf0 \

\f1 \cf2     You still configure it up-front ...
\f0 \cf0 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  minimumPressDuration : \cf5 TimeInterval\cf2  
\f3\i \cf7 \cb3 // how long to hold before its recognized
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  numberOfTouchesRequired : \cf5 Int\cf2        
\f3\i \cf7 \cb3 // finger count
\f0\i0 \cf0 \cb3 \

\f1 \cf2     
\f2\b \cf4 var
\f1\b0 \cf2  allowableMovement : \cf5 CGFloat\cf2          
\f3\i \cf7 \cb3 //how far finger can move and still recognize
\f0\i0 \cf0 \cb3 \

\f1 \cf2     Very important to pay attention to .cancelled because drag and drop\
\
\
Well there's PinchGesture.It's information is the scale . \
So  if we start here with a pinch and go twice as wide   well that's scale 2.0 and go half as wide it's 0.5\
And there's also velocity  for that\
\
There's RotationGesture,which is like turning a knob.\
A two finger gesture turning the knob. And in radians , \
It will tell you how much the knob has been turned into radians\
\
There's a swipeGesture and you can now swipe a little different than these other ones in that you canfigure he swipe\
How many fingers?What direction left,right,up,down?\
And then you turn the swipe gesture on by adding it. then when the swipe happens you will just .\cf8 \cb3 ended\cf2 \cb3  \
Your handler will get called with .\cf8 \cb3 ended\cf2 \cb3  .\
It''s different in that you configure it up front and then it just tells you whether it recognized it or not.\
\
There's Tap gesture which feels like it would be like swipe a discrete gesture but actually\
since it does double tap and other things you are always looking for  .\cf8 \cb3 ended \cf2 \cb3 only with the TapGesture , usually.\
But you also configure it like a swipe gesture how many taps, how many fingers .\
\
\
Long press is you hold your finger down on the screen for enough  time and it starts recognizing it . This is surprisingly a continuous  gesture because as you are holding it down your finger might be moving a little bit and that's okay it's not a pan. because it can only move a little bit.\
But if does move a little bit you will get .\cf8 \cb3 changed.\
\cf2 \cb3 And you can configure how much movement you allow and how long it has to be pressed before it's a LongPress.\
This one gets interrupted a lot by drag and drop.\
Because drag and drop uses LongPress.That's how you pick something up with drag and drop is Long Press.\
So if you have a LongPress and there's some drag and  drop going on , you know the system is very smart about figuring which one you actually intend.\
But it could cause your long press to be cancelled \
\
\
\
}